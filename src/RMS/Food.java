/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RMS;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author saman
 */
public class Food extends javax.swing.JFrame {

    DefaultTableModel model;

    /**
     * Creates new form Food
     */
    public Food() {
        initComponents();
        this.setLocationRelativeTo(null);
        model = (DefaultTableModel) foodCategory_tbl.getModel();

        this.getContentPane().setBackground(new Color(255, 255, 255));
        DefaultTableCellRenderer MyHeaderRender = new DefaultTableCellRenderer();
        MyHeaderRender.setBackground(new Color(0, 0, 0));
        MyHeaderRender.setForeground(new Color(255, 255, 255));
        foodCategory_tbl.getTableHeader().getColumnModel().getColumn(0).setHeaderRenderer(MyHeaderRender);
        foodCategory_tbl.getTableHeader().getColumnModel().getColumn(1).setHeaderRenderer(MyHeaderRender);
        foodCategory_tbl.getTableHeader().getColumnModel().getColumn(2).setHeaderRenderer(MyHeaderRender);
    }

    public void blank() {

        foodCategory_txt.setText(null);
        description_txt.setText(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add_btn = new javax.swing.JButton();
        description_lbl = new javax.swing.JLabel();
        description_txt = new javax.swing.JTextField();
        search_lbl = new javax.swing.JLabel();
        search_txt = new javax.swing.JTextField();
        foodCategory_lbl = new javax.swing.JLabel();
        update_btn = new javax.swing.JButton();
        foodCategory_txt = new javax.swing.JTextField();
        reset_btn = new javax.swing.JButton();
        close_btn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        delete_btn = new javax.swing.JButton();
        foodCategory_pnl = new javax.swing.JScrollPane();
        foodCategory_tbl = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        add_btn.setIcon(new javax.swing.ImageIcon("D:\\Restaurant Managment System Oop Project\\RMS\\Resources\\plus (2).png")); // NOI18N
        add_btn.setText("Add");
        add_btn.setNextFocusableComponent(foodCategory_txt);
        add_btn.setPreferredSize(new java.awt.Dimension(75, 25));
        add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_btnActionPerformed(evt);
            }
        });
        add_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                add_btnKeyPressed(evt);
            }
        });

        description_lbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        description_lbl.setText("Description");

        description_txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        description_txt.setNextFocusableComponent(add_btn);

        search_lbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        search_lbl.setText("Search");

        search_txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        search_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_txtKeyReleased(evt);
            }
        });

        foodCategory_lbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        foodCategory_lbl.setText("Food Category ");

        update_btn.setIcon(new javax.swing.ImageIcon("D:\\Restaurant Managment System Oop Project\\RMS\\Resources\\updated.png")); // NOI18N
        update_btn.setText("Update");
        update_btn.setNextFocusableComponent(foodCategory_txt);
        update_btn.setPreferredSize(new java.awt.Dimension(75, 25));
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });
        update_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                update_btnKeyPressed(evt);
            }
        });

        foodCategory_txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        foodCategory_txt.setNextFocusableComponent(description_txt);

        reset_btn.setIcon(new javax.swing.ImageIcon("D:\\Restaurant Managment System Oop Project\\RMS\\Resources\\remove.png")); // NOI18N
        reset_btn.setText("Reset");
        reset_btn.setPreferredSize(new java.awt.Dimension(75, 25));
        reset_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_btnActionPerformed(evt);
            }
        });
        reset_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                reset_btnKeyPressed(evt);
            }
        });

        close_btn.setIcon(new javax.swing.ImageIcon("D:\\Restaurant Managment System Oop Project\\RMS\\Resources\\close.png")); // NOI18N
        close_btn.setText("Close");
        close_btn.setPreferredSize(new java.awt.Dimension(75, 25));
        close_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_btnActionPerformed(evt);
            }
        });
        close_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                close_btnKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Food Category");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        delete_btn.setIcon(new javax.swing.ImageIcon("D:\\Restaurant Managment System Oop Project\\RMS\\Resources\\minus.png")); // NOI18N
        delete_btn.setText("Delete");
        delete_btn.setNextFocusableComponent(foodCategory_txt);
        delete_btn.setPreferredSize(new java.awt.Dimension(75, 25));
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });
        delete_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                delete_btnKeyPressed(evt);
            }
        });

        foodCategory_tbl.setAutoCreateRowSorter(true);
        foodCategory_tbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        foodCategory_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Category", "Description", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        foodCategory_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foodCategory_tblMouseClicked(evt);
            }
        });
        foodCategory_tbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                foodCategory_tblKeyPressed(evt);
            }
        });
        foodCategory_pnl.setViewportView(foodCategory_tbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(add_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(foodCategory_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foodCategory_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(description_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(description_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                        .addComponent(search_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(foodCategory_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(update_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(close_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodCategory_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(foodCategory_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(description_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(description_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reset_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(foodCategory_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(close_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add_btn, close_btn, delete_btn, reset_btn, update_btn});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_btnActionPerformed

        if (!(Pattern.matches("^[a-zA-Z ]+$", foodCategory_txt.getText()))) {
            JOptionPane.showMessageDialog(this, "Please enter a valid food category", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!(Pattern.matches("^[a-zA-Z ]+$", description_txt.getText()))) {
            JOptionPane.showMessageDialog(this, "Please enter a valid description", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (evt.getSource() == add_btn) {
            model.insertRow(model.getRowCount(), new Object[]{foodCategory_txt.getText(), description_txt.getText(), java.time.LocalDate.now()});
            blank();
        }

        try {
            File data = new File("Files/foodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            FileWriter fw = new FileWriter(data.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                }
                bw.write("\n");
            }
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        try {
            File data = new File("Resources/onlyFoodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            FileWriter fw = new FileWriter(data.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                int j = 0;
                bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

            }
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_add_btnActionPerformed

    private void add_btnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_add_btnKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!(Pattern.matches("^[a-zA-Z ]+$", foodCategory_txt.getText()))) {
                JOptionPane.showMessageDialog(this, "Please enter a valid food category", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!(Pattern.matches("^[a-zA-Z ]+$", description_txt.getText()))) {
                JOptionPane.showMessageDialog(this, "Please enter a valid description", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (evt.getSource() == add_btn) {
                model.insertRow(model.getRowCount(), new Object[]{foodCategory_txt.getText(), description_txt.getText(), java.time.LocalDate.now()});
                blank();
            }
            try {
                File data = new File("Files/foodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                FileWriter fw = new FileWriter(data.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                    for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                        bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                    }
                    bw.write("\n");
                }
                bw.close();
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
            try {
                File data = new File("Resources/onlyFoodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                FileWriter fw = new FileWriter(data.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                    int j = 0;
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

                }
                bw.close();
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }

        }

        foodCategory_txt.requestFocusInWindow();
    }//GEN-LAST:event_add_btnKeyPressed

    private void search_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_txtKeyReleased

        TableRowSorter<DefaultTableModel> t4 = new TableRowSorter<>(model);
        foodCategory_tbl.setRowSorter(t4);
        t4.setRowFilter(RowFilter.regexFilter("(?i)" + search_txt.getText().trim()));
    }//GEN-LAST:event_search_txtKeyReleased

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed

        if (foodCategory_tbl.getSelectedRowCount() == 1) {

            String foodCategory = foodCategory_txt.getText();
            String description = description_txt.getText();

            model.setValueAt(foodCategory, foodCategory_tbl.getSelectedRow(), 0);
            model.setValueAt(description, foodCategory_tbl.getSelectedRow(), 1);
            JOptionPane.showMessageDialog(this, "updated!");
        } else {
            if (foodCategory_tbl.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "no values in table");
            } else {
                JOptionPane.showMessageDialog(this, "select a single row to update");
            }

        }
        try {
            File data = new File("Files/foodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            FileWriter fw = new FileWriter(data.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                }
                bw.write("\n");
            }
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            File data = new File("Resources/onlyFoodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            try (FileWriter fw = new FileWriter(data.getAbsoluteFile())) {
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                    int j = 0;
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

                }
                bw.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
        }
        blank();
    }//GEN-LAST:event_update_btnActionPerformed

    private void update_btnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_btnKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (foodCategory_tbl.getSelectedRowCount() == 1) {

                String foodCategory = foodCategory_txt.getText();
                String description = description_txt.getText();

                model.setValueAt(foodCategory, foodCategory_tbl.getSelectedRow(), 0);
                model.setValueAt(description, foodCategory_tbl.getSelectedRow(), 1);
                JOptionPane.showMessageDialog(this, "updated!");
            } else {
                if (foodCategory_tbl.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "no values in table");
                } else {
                    JOptionPane.showMessageDialog(this, "select a single row to update");
                }

            }
            try {
                File data = new File("Files/foodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                try (FileWriter fw = new FileWriter(data.getAbsoluteFile());
                        BufferedWriter bw = new BufferedWriter(fw)) {

                    for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                        for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                            bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                        }
                        bw.write("\n");
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                File data = new File("Resources/onlyFoodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                try (FileWriter fw = new FileWriter(data.getAbsoluteFile());
                        BufferedWriter bw = new BufferedWriter(fw)) {

                    for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                        int j = 0;
                        bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            }
            blank();

        }
    }//GEN-LAST:event_update_btnKeyPressed

    private void reset_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_btnActionPerformed
        blank();
        foodCategory_txt.requestFocusInWindow();
    }//GEN-LAST:event_reset_btnActionPerformed

    private void reset_btnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reset_btnKeyPressed
        blank();
        foodCategory_txt.requestFocusInWindow();
    }//GEN-LAST:event_reset_btnKeyPressed

    private void close_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_btnActionPerformed
        dispose();
    }//GEN-LAST:event_close_btnActionPerformed

    private void close_btnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_btnKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            dispose();
        }
    }//GEN-LAST:event_close_btnKeyPressed

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed

        if (foodCategory_tbl.getSelectedRow() != -1) {
            int modelRow = foodCategory_tbl.convertRowIndexToModel(foodCategory_tbl.getSelectedRow());
            model.removeRow(modelRow);
            search_txt.setText("");
            foodCategory_txt.requestFocus();
            TableRowSorter<DefaultTableModel> t4 = new TableRowSorter<>(model);
            foodCategory_tbl.setRowSorter(t4);
            t4.setRowFilter(null);
        }

        try {
            File data = new File("Files/foodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            FileWriter fw = new FileWriter(data.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                }
                bw.write("\n");
            }
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        try {
            File data = new File("Resources/onlyFoodCategory.txt");
            if (!data.exists()) {
                data.createNewFile();
            }

            FileWriter fw = new FileWriter(data.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                int j = 0;
                bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

            }
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
        }
        blank();
    }//GEN-LAST:event_delete_btnActionPerformed

    private void delete_btnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_delete_btnKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (foodCategory_tbl.getSelectedRow() != -1) {
                int modelRow = foodCategory_tbl.convertRowIndexToModel(foodCategory_tbl.getSelectedRow());
                model.removeRow(modelRow);
                search_txt.setText("");
                foodCategory_txt.requestFocus();
                TableRowSorter<DefaultTableModel> t4 = new TableRowSorter<>(model);
                foodCategory_tbl.setRowSorter(t4);
                t4.setRowFilter(null);
            }
            try {
                File data = new File("Files/foodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                FileWriter fw = new FileWriter(data.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                    for (int j = 0; j < foodCategory_tbl.getColumnCount(); j++) {
                        bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + ",");
                    }
                    bw.write("\n");
                }
                bw.close();
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                File data = new File("Resources/onlyFoodCategory.txt");
                if (!data.exists()) {
                    data.createNewFile();
                }

                FileWriter fw = new FileWriter(data.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < foodCategory_tbl.getRowCount(); i++) {
                    int j = 0;
                    bw.write(foodCategory_tbl.getModel().getValueAt(i, j) + "\n");

                }
                bw.close();
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }

            blank();

        }
    }//GEN-LAST:event_delete_btnKeyPressed

    private void foodCategory_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foodCategory_tblMouseClicked

        int row[] = this.foodCategory_tbl.getSelectedRows();

        for (int i = 0; i < row.length; i++) {

            int modelRow = foodCategory_tbl.convertRowIndexToModel(row[i]);
            String category = model.getValueAt(modelRow, 0).toString();
            String description = model.getValueAt(modelRow, 1).toString();
            foodCategory_txt.setText(category);
            description_txt.setText(description);

        }
    }//GEN-LAST:event_foodCategory_tblMouseClicked

    private void foodCategory_tblKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_foodCategory_tblKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            int row[] = this.foodCategory_tbl.getSelectedRows();

            for (int i = 0; i < row.length; i++) {

                int modelRow = foodCategory_tbl.convertRowIndexToModel(row[i]);
                String category = model.getValueAt(modelRow, 0).toString();
                String description = model.getValueAt(modelRow, 1).toString();
                foodCategory_txt.setText(category);
                description_txt.setText(description);

            }
        }
    }//GEN-LAST:event_foodCategory_tblKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (model.getRowCount() <= 0) {
            try {
                File myObj = new File("Files/foodCategory.txt");
                if (myObj.createNewFile()) {
                    System.out.println("File created: " + myObj.getName());
                } else {
                    System.out.println("File already exists.");
                }

                try (Scanner myReader = new Scanner(myObj)) {
                    while (myReader.hasNextLine()) {
                        String data = myReader.nextLine();
                        model.insertRow(model.getRowCount(), new Object[]{data.split(",")[0], data.split(",")[1], data.split(",")[2]});
                    }
                }
            } catch (IOException e) {
                System.out.println("An error occurred.");
            }
        }

        foodCategory_txt.requestFocusInWindow();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Food().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_btn;
    private javax.swing.JButton close_btn;
    private javax.swing.JButton delete_btn;
    private javax.swing.JLabel description_lbl;
    private javax.swing.JTextField description_txt;
    private javax.swing.JLabel foodCategory_lbl;
    private javax.swing.JScrollPane foodCategory_pnl;
    private javax.swing.JTable foodCategory_tbl;
    private javax.swing.JTextField foodCategory_txt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton reset_btn;
    private javax.swing.JLabel search_lbl;
    private javax.swing.JTextField search_txt;
    private javax.swing.JButton update_btn;
    // End of variables declaration//GEN-END:variables
}
